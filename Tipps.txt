==  tries type conversion before comparison
=== checks type and value

in arrow functions 'this' is not bound to the object
(it refers to the global object)

------------------------------------------------------

DESTRUCTURING assignment:
-------------------------

const person = {
	firstName: 'John',
	lastName: 'Doe',
	age: 21,
	address: {
		street: '50 Main Street',
		city: 'Boston',
		state: 'Mass'
	}
}

const {firstName, lastName, address: { city } } = person;


forEach
map
filter
reduce


var voxel = {x:'a', y:'b', z:'c'};
->
const {x: a, y: b, z: c} = voxel;

const AVG_TEMPERATURES = {
  today: 77.5,
  tomorrow: 79
};

function getTempOfTmrw(avgTemperatures) {
  "use strict";
  const {tomorrow: tempOfTomorrow} = avgTemperatures;
  return tempOfTomorrow;
}

const LOCAL_FORECAST = {
	  today: { min: 72, max: 83 },
  tomorrow: { min: 73.3, max: 84.6 }
};

function getMaxOfTmrw(forecast) {
  "use strict";
  const {tomorrow: {max: maxOfTomorrow}} = forecast;
  return maxOfTomorrow;
}

return an object:
-----------------
const createPerson = (name, age, gender) => ({ name, age, gender });


object contains a function:
---------------------------
const bicycle = {
  gear: 2,
  setGear : function (newGear) {
	"use strict";
	this.gear = newGear;
  }
};

shorter:
const bicycle = {
  gear: 2,
  setGear (newGear) {
	"use strict";
	this.gear = newGear;
  }
};


class:
------
 var SpaceShuttle = function(targetPlanet){
	  this.targetPlanet = targetPlanet;
 }
 var zeus = new SpaceShuttle('Jupiter');

 ->
 class SpaceShuttle {
  constructor(targetPlanet) {
	this.targetPlanet = targetPlanet;
  }
 }
var zeus = new SpaceShuttle('Jupiter');


getters and setters:
--------------------
class Book {
  constructor(author) {
    this._author = author;
  }
  // getter
  get writer() {
    return this._author;
  }
  // setter
  set writer(updatedAuthor) {
    this._author = updatedAuthor;
  }
}

const book = new Book("Schiller");
book.writer = 'Goethe';
console.log(book.writer);


copy an array:
--------------
arr2 = [...arr1]; or:
arr2 = arr1.slice();

... (spread operator):
----------------------
const array1 = [1, 2, 3];
const array2 = [...array1, 4, 5];

remove first 2 elements:
------------------------
const [, , ...arr2] = arr1;

Unpacking
const numbers = [1, 2, 3, 4];
const [first, second, ...remaining] = numbers;

[a, b] = [b, a];


const stats = {
	max: 56.78,
	standard_deviation: 4.34,
	median: 34.54,
	mode: 23.87,
	min: -0.75,
	average: 35.85
};

const half = ({ max, min }) => (max + min) / 2.0;

------------------------------------------------------

for (let char of str)
str.split('').forEach

function add(x, y) {...}			// normal
function avg (...args) {...}	// rest operator
function area({width, height}) {...}	// destructuring
area({width: 2, height: 3})	// destructuring
function def(x, y, z = 0) {...}		// default value
const avg = function(...args) {...}		// anonymous function
const avg = (args) => {...}	// anonymous arrow function

static (porperty)
# (private property)


OOP:
func() { 
	...
	return this}    <--- chaining

class X extends Y {
	...
}

Y.apply(...);
Y.call(...);
Object.create(...)

-------------------------------------------------

DOM
(with style) innerText <-> textContent (without style)
innerHTML = '<h3>Hello</h3>

document.querySelectorAll returns a NodeList (with array methods)
document.getElementsByClassName returns a HTMLCollection (without array methods)

(in CSS eg.) margin-top <-> marginTop (Javascript)

Don't use childNodes, better use children
Don't use firstChild, better use firstElementChild
Don't use lastChild, better use lastElementChild
Don't use ...Sibling, better use ...ElementSibling


-------------------------------------------------

Export:
people = ['a', 'b', 'c'];
ages = [1, 2, 3];

module.exports = {
    people, ages
}

Import
const {  people, ages } = require('./file.js');

-------------------------------------------------

HTML:

inline elements: do not start new line, take only required width
block elements: start new line, take full width available

attributes are key value pairs
href="", target="...,
	the value is always in quotes


Quotations:
- <blockquote>
- <abbr>
- <cite>

HTML5 Semantic Tags
<header>
<footer>
<aside>
<main>
<article>
<nav>
<section>
<details>


CSS
inline css: style="color: red;"

internal:
<head>
	css: <style>...</style>
</head>

external:
<head>
	<link rel="stylesheet" type="text/css" href="style.css">
</head>


CSS Selector/Declaration

selector        property       value
   a       {  background-color: yellow  ;   }

           {Declaration Start
                              : property/value separator
										; Declaration Separator
									        }Declaration End

Colors in CSS

*{
	margin: 0;
	padding: 0;
}

body {
	color: red;
	color: #ff0000;
	color: rgb(255, 0, 0);
	color: rgba(255, 0, 0, 0.5);
	color: hsl(0, 100%, 50%);
	color: hsla(0, 100%, 50%, 0.5);
}

Web Safe Fonts
font-family: "Times New Roman", Times, serif;
font-size: 16px;
font-weight: bold;
short:
font: normal 16px bold "Times New Roman", Times, serif;


Box Model (top-right-bottom-left)

top margin
top border
top padding
bottom padding
bottom border
bottom margin
p{
	margin: 10px 20px 30px 40px;
	border: 10px solid red;
	border-right: 20px solid blue;
	border-left-style: dotted;
	padding: 10px 20px 30px 40px;
}
p{ margin: 10px; padding: 10px; border: 10px solid red; }


Positioning in CSS

static: default, no positioning
relative: relative to itself
absolute: relative to parent
fixed: relative to viewport
initial: reset to default
inherit: from parent


REST
RE  Representational
S   State
T   Transfer


CRUD
C   Create
R   Read
U   Update
D   Delete


[GET]       http://localhost:8080/employees
			-> acts on entire resource
			-> returns a List
[POST]      http://localhost:8080/employees -> Employee
			-> acts on entire resource
			-> creates a new resource
[GET]       http://localhost:8080/employees/1 -> Employee
			-> acts on a single resource
			-> returns a single resource with given id
[PUT]       http://localhost:8080/employees/1   -> Employee
			-> acts on a single resource
			-> updates a single resource with given id
[DELETE]    http://localhost:8080/employees/1  -> void
			-> acts on a single resource
			-> deletes a single resource with given id


DOM
document
object
model

DOM is created by the browser

MVC
M   Model       Handels Data Logic
				Interacts with DB
V   View        Handels Presentation Logic
				Dynamic Rendering
C   Controller  Handles Request Flow


NODE.JS
npm init
npm install (recreate node_modules)
npm install ... (locally)
npm install -g ... (globally)
npm install -D nodemon (nodemonitor)



(Macro)Tasks	Animation callbacks			Microtasks
setTimeout		requestAnimationFrame		Promise
setTnterval

execution
on next 									before next 
event loop									event loop


Chrome DevTools:
----------------
in Console:
$()		alias for document.querySelector()
		ex: $('h1').style.color = 'blue';
$_		(last computation)  
$0		(last selected element)
$1		(second last selected element)

ESC 	opens separate console window

console.table([ {a: 1, b: 2, c: 3}, {a: "foo", b: false, c: undefined}])

console.group('group start')
console.log('log message')
console.groupEnd('group end')

console.time('timer')
...	
console.timeEnd('timer')	


MONGO :
-------
use mydb ->
mydb>
create document:


db.mydoc.find({a: "foo"})


